// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SppProtocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SppProtocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - SppProtocolRoot

@implementation SppProtocolRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SppProtocolRoot_FileDescriptor

static GPBFileDescriptor *SppProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Request

@implementation Request

@dynamic contentOneOfCase;
@dynamic type;
@dynamic code;
@dynamic control;
@dynamic wifiInfo;
@dynamic mediaCmd;

typedef struct Request__storage_ {
  uint32_t _has_storage_[2];
  Request_RequestType type;
  int32_t control;
  Request_MediaCommand mediaCmd;
  NSString *code;
  Request_WifiInfo *wifiInfo;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Request_RequestType_EnumDescriptor,
        .number = Request_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Code,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "control",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Control,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, control),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wifiInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(Request_WifiInfo),
        .number = Request_FieldNumber_WifiInfo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaCmd",
        .dataTypeSpecific.enumDescFunc = Request_MediaCommand_EnumDescriptor,
        .number = Request_FieldNumber_MediaCmd,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, mediaCmd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[SppProtocolRoot class]
                                          file:SppProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "content",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\010\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Request_Type_RawValue(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequest_Type_RawValue(Request *message, int32_t value) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Request_MediaCmd_RawValue(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_MediaCmd];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequest_MediaCmd_RawValue(Request *message, int32_t value) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_MediaCmd];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void Request_ClearContentOneOfCase(Request *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum Request_RequestType

GPBEnumDescriptor *Request_RequestType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Alexa\000Spotify\000Soundcolud\000Mediacontrol\000Wi"
        "fi\000";
    static const int32_t values[] = {
        Request_RequestType_Alexa,
        Request_RequestType_Spotify,
        Request_RequestType_Soundcolud,
        Request_RequestType_Mediacontrol,
        Request_RequestType_Wifi,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Request_RequestType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Request_RequestType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Request_RequestType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Request_RequestType_Alexa:
    case Request_RequestType_Spotify:
    case Request_RequestType_Soundcolud:
    case Request_RequestType_Mediacontrol:
    case Request_RequestType_Wifi:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Request_MediaCommand

GPBEnumDescriptor *Request_MediaCommand_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Play\000Pause\000Next\000Pre\000Collecton\000Volup\000Vold"
        "owm\000";
    static const int32_t values[] = {
        Request_MediaCommand_Play,
        Request_MediaCommand_Pause,
        Request_MediaCommand_Next,
        Request_MediaCommand_Pre,
        Request_MediaCommand_Collecton,
        Request_MediaCommand_Volup,
        Request_MediaCommand_Voldowm,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Request_MediaCommand)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Request_MediaCommand_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Request_MediaCommand_IsValidValue(int32_t value__) {
  switch (value__) {
    case Request_MediaCommand_Play:
    case Request_MediaCommand_Pause:
    case Request_MediaCommand_Next:
    case Request_MediaCommand_Pre:
    case Request_MediaCommand_Collecton:
    case Request_MediaCommand_Volup:
    case Request_MediaCommand_Voldowm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Request_WifiInfo

@implementation Request_WifiInfo

@dynamic ssid;
@dynamic pwd;

typedef struct Request_WifiInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *ssid;
  NSString *pwd;
} Request_WifiInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ssid",
        .dataTypeSpecific.className = NULL,
        .number = Request_WifiInfo_FieldNumber_Ssid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request_WifiInfo__storage_, ssid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = Request_WifiInfo_FieldNumber_Pwd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request_WifiInfo__storage_, pwd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request_WifiInfo class]
                                     rootClass:[SppProtocolRoot class]
                                          file:SppProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request_WifiInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Request)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Response

@implementation Response

@dynamic code;
@dynamic reason;

typedef struct Response__storage_ {
  uint32_t _has_storage_[1];
  Response_ResponseCode code;
  NSString *reason;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = Response_ResponseCode_EnumDescriptor,
        .number = Response_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Response__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "reason",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Reason,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Response__storage_, reason),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[SppProtocolRoot class]
                                          file:SppProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Response__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Response_Code_RawValue(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetResponse_Code_RawValue(Response *message, int32_t value) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Response_ResponseCode

GPBEnumDescriptor *Response_ResponseCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Fail\000";
    static const int32_t values[] = {
        Response_ResponseCode_Success,
        Response_ResponseCode_Fail,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Response_ResponseCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Response_ResponseCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Response_ResponseCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Response_ResponseCode_Success:
    case Response_ResponseCode_Fail:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
